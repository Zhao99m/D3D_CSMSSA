import torch
import torch.nn as nn
from torchvision.models.video import r3d_50
from mmcv.ops import DeformConv3d

class DeformableResNextI3D(nn.Module):
    def __init__(self, num_classes, pretrained=True):
        super(DeformableResNextI3D, self).__init__()
        
        self.resnext = r3d_50(pretrained=pretrained)
        
        self.replace_conv_with_deform_conv(self.resnext)
        
        self.resnext.fc = nn.Linear(self.resnext.fc.in_features, num_classes)
    
    def replace_conv_with_deform_conv(self, model):
        for name, module in model.named_children():
            if isinstance(module, nn.Conv3d):
                if isinstance(list(model.children())[-1], nn.Conv3d):
                    if "layer1" in name:
                        stride = (1, 2, 2)
                        padding = (0, 0, 0)
                    elif "layer2" in name or "layer3" in name or "layer4" in name:
                        stride = (3, 2, 2)
                        padding = (1, 0, 0)
                    else:
                        continue
                    
                    deform_conv = DeformConv3d(
                        in_channels=module.in_channels,
                        out_channels=module.out_channels,
                        kernel_size=module.kernel_size,
                        stride=stride,
                        padding=padding,
                        bias=True if module.bias is not None else False
                    )
                    setattr(model, name, deform_conv)
            else:
                self.replace_conv_with_deform_conv(module)
    
    def forward(self, x):
        return self.resnext(x)

